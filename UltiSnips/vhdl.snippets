# sl - signal std_logic
# sv - signal std_logic_vector
# ss - signal signed
# su - signal unsigned
# si - signal integer
# sb - signal boolean

# vl - variable std_logic
# vv - variable std_logic_vector
# vs - variable signed
# vu - variable unsigned
# vi - variable integer

# il - in std_logic
# iv - in std_logic_vector
# ol - out std_logic
# ov - out std_logic_vector

# bl - block

# gif - generate if
# gfor - generate for

# for - for loop
# while - while loop

# ta - type array
# tr - type record

# pr - will expand out sync / async if clk is in the signal name
# pra - all  - vim-snippets
# prc - clk  - vim-snippets

# lib - a lib to complete
# libs - std enitity libs
# unisim  - unisim lib

global !p
import px.snippets
endglobal

global !p

# This function will jump to next placeholder when first is empty.
def jump_to_second_when_first_is_empty(snip):
	if px.snippets.get_jumper_position(snip) == 1:
		if not px.snippets.get_jumper_text(snip):
			px.snippets.advance_jumper(snip)

# This function will clean up first placeholder when this is empty.
def clean_first_placeholder(snip):
	# Jumper is a helper for performing jumps in UltiSnips.
	px.snippets.make_jumper(snip)

	if snip.tabstop == 2 and not px.snippets.get_jumper_text(snip):
		line = snip.buffer[snip.cursor[0]]
		snip.buffer[snip.cursor[0]] = \
			line[:snip.tabstops[1].start[1]-2] + \
			line[snip.tabstops[1].end[1]+1:]
		snip.cursor.set(
			snip.cursor[0],
			snip.cursor[1] - 3,
		)


def goto_eol(snip):
	cur_line_length = len(snip.buffer[snip.line])
	snip.cursor.set(
		snip.cursor[0],
		cur_line_length+1,
	)

#def skip(snip):
#	 if px.snippets.get_jumper_position(snip) == 2:
#		 if not px.snippets.get_jumper_text(snip):
#			 px.snippets.advance_jumper(snip)

# def make_jumper(snip, on_tabstop=1):
#	  if snip.tabstop != on_tabstop:
#		  return
#
#	  snip.context.update({'jumper': {'enabled': True, 'snip': snip}})

# theres a dummy context - this stores the snippet as part of the context so it can be accessed to do the autojump
# so you can create a jumper and access the snip object
def jump(snip, tabstop):
	# make jumper - takes the snip and the tabstop to create the jumper at
	# this stores the snip in the jumper - which is part of the context, which is why the dummy context is created
	px.snippets.make_jumper(snip, 2)

	# at the tabstop you want to jump -
	# check if the current tab stop is the one your want.
	# then if the text of the jumper snip is empty
	# then jump.
	if snip.tabstop == tabstop and not px.snippets.get_jumper_text(snip):
		px.snippets.advance_jumper(snip)

def auto_postjump(snip):
	px.snippets.make_jumper(snip, 2)

def autojump(snip):
	if not px.snippets.get_jumper_text(snip):
		px.snippets.advance_jumper(snip)



endglobal

#############################################
#  This is a dev secton for playing around	#
#############################################

context "px.snippets.make_context(snip)"
post_jump "clean_first_placeholder(snip)"
snippet x "Description" b
`!p jump_to_second_when_first_is_empty(snip)
`func (${1:blah}) $2() {
	$3
}
endsnippet

#context always evaluates to true. make it so you can store the jumper
#post jump - make a jumper to store the snip at tabstop 2
#auto jump - if the jumper text is empty (the text at tabstop 2) auto jump
context "px.snippets.make_context(snip)"
post_jump "px.snippets.make_jumper(snip, 2)"
snippet dbg_jump
this is a test
`!p autojump(snip)`
ts 1 = ${1:test1}
ts 2 = ${2:test2}
ts 3 = ${3:test3}
ts 4 = ${4:test4}
endsnippet

snippet dbg_f
entity ${1:`!p snip.rv=snip.basename`} is
	generic (
		${3}
	); `!p
if t[1] == "tb":
	snip += "end entity %s;" % t[1];
else:
	snip >> 1
	snip += "port ("
	snip += ")"
	snip << 1
	snip += "end entity %s;" % t[1];
`

architecture `!p snip.rv = "sim" if t[1] in "tb" else "rtl" ` of $1 is
	${4}
begin
	${5}
end architecture $1;
endsnippet

snippet dbg_e
entity ${1:`!p snip.rv=snip.basename`} is
	generic
	(
		${2}
	);`!p
if t[1] == "tb":
	snip += "end entity %s;" % t[1];
else:
	snip >> 1
	snip += "port"
	snip += "("
	snip += ");"
	snip << 1
	snip += "end entity %s;" % t[1];
`

architecture `!p snip.rv = "sim" if t[1] in "tb" else "rtl" ` of $1 is
	${4}
begin
	${5}
end architecture `!p snip.rv = "sim" if t[1] in "tb" else "rtl" `;
endsnippet

########################
#  end of dev section  #
########################

snippet lib
library ${1};
	use $1.${2}.${3:all};${0}
endsnippet

snippet libs
library ieee;
	use ieee.std_logic_1164.ALL;
	use ieee.numeric_std.ALL;
endsnippet

snippet unisim
library unisim;
	use unisim.vcomponents.ALL;
endsnippet

snippet prs
P_${1} : process
begin
	${0}
end process P_$1;
endsnippet

snippet pr
P_${1} : process(${2})
begin`!p
if re.search('clk', t[2],re.IGNORECASE):
	snip >> 1
	snip += "if rising_edge(%s) then" % t[2]
	snip >> 1
	snip+=""
else:
	snip >> 1
	snip+=""
`${0}`!p
if re.search('clk', t[2],re.IGNORECASE):
	snip >> 1
	snip += "end if;"
else:
	snip.rv=""
`
end process P_$1;
endsnippet

snippet sl
signal ${1:${VISUAL}} : std_logic := '0';${0}
endsnippet

snippet sv
signal ${1:${VISUAL}} : std_logic_vector(${2} downto 0) := (others => '0');
endsnippet

snippet ss
signal ${1:${VISUAL}} : signed(${2} downto 0) := (others => '0');
endsnippet

snippet su
signal ${1:${VISUAL}} : unsigned(${2} downto 0) := (others => '0');
endsnippet

snippet si
signal ${1:${VISUAL}} : integer ${2:range ${3}} := 0;
endsnippet

snippet sb
signal ${1:${VISUAL}} : boolean := ${2:false};
endsnippet

snippet vl
variable ${1:${VISUAL}} : std_logic;
endsnippet

snippet vv
variable ${1:${VISUAL}} : std_logic_vector(${2} downto 0);
endsnippet

snippet vs
variable ${1:${VISUAL}} : signed(${2} downto 0);
endsnippet

snippet vu
variable ${1:${VISUAL}} : unsigned(${2} downto 0);
endsnippet

snippet vi
variable ${1:${VISUAL}} : integer ${2:range ${3}};
endsnippet

snippet vb
variable ${1:${VISUAL}} : boolean;
endsnippet

snippet il
${1:${VISUAL}}: in std_logic;
endsnippet

snippet iv
${1:${VISUAL}}: in std_logic_vector(${2} downto 0);
endsnippet

snippet ol
${1:${VISUAL}}: out std_logic;
endsnippet

snippet ov
${1:${VISUAL}}: out std_logic_vector(${2} downto 0);
endsnippet


snippet bl "block..."
${1} : block
begin
	$0
end block $1;
endsnippet

snippet gfor "generate if"
${1} : for ${2:i} in 0 to ${3} generate
begin
	${0}
end generate $1;
endsnippet

snippet gif "generate if"
${1} : if ${2} generate
begin
	${0}
end generate $1;
endsnippet

# test_vect : std_logic_vector(10 downto 0):= (others => '0')
# (?: ) groups words, but does not create match
post_jump "goto_eol(snip)"
snippet "(\s*\w+\s*:\s*(?:inout|in|out)?\s*(\w+)(\(.*\))?\s*:=\s*)" "auto complete default signal value" r
`!p
if (match.group(2).lower() == "std_logic_vector") :
	snip.rv = match.group(1) + "(others => '0')"
elif (match.group(2).lower() == "unsigned") :
	snip.rv = match.group(1) + "(others => '0')"
elif (match.group(2).lower() == "signed") :
	snip.rv = match.group(1) + "(others => '0')"
elif (match.group(2).lower() == "integer") :
	snip.rv = match.group(1) + "0"
elif (match.group(2).lower() == "std_logic") :
	snip.rv = match.group(1) + "'0'"
else :
	snip.rv = match.group(1) + ""
`${0}
endsnippet

snippet ta "type array"
type $1 is array (integer range ${2:<>}) of ${3:std_logic_vector(${4} downto 0)};
endsnippet
#
snippet tr "type record"
type $1 is record
	${0}
end record;
endsnippet

snippet while "while"
while ${1} loop
	${2}
end while;
endsnippet

snippet for
for ${1:i} in ${2:0 to ${3} - 1} loop
	${4}
end for;
endsnippet

snippet slv "std_logic_vector"
std_logic_vector(${1} downto 0)${2: := (others => '0')};${3}
endsnippet

snippet proc "procedure"
${1:impure} function ${2} (${3}) return ${4:return_type} is
begin
	${5}
end function;
endsnippet

snippet func "function"
${1:impure }function ${2} (${3}) return ${4:return_type} ${5:is
begin
	${0}
end function};
endsnippet

snippet with "with select combination mux"
with ${1:condition} select ${2:assign_to} <= ${3:value}  when ${3:equals},
					     ${4:value}  when ${4:equals},
					     ${5}        when others; 
endsnippet


snippet header
-------------------------------------------------------------------------------
-- Title	  : ${1}
-- Project	  : Dag
-------------------------------------------------------------------------------
-- File		  : $1
-- Author	  : Alan Canniff  <alan.canniff@endace.com>
-- Company	  : Endace Technology
-- CVS ID	  : $Id$
-------------------------------------------------------------------------------
-- Copyright Endace 2018. All rights reserved.
--
-- DESCRIPTION:
--
-- ${0}
--
-- ASSUMPTIONS:
--
-------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

library work;


endsnippet

    
snippet srbm
    E_SRB_MERGE : entity work.srb_reply_merge
    generic map (
        g_USE_PRE_RST => false,
        g_COUNT       => srb_replies'length
    )
    port map (
        i_srb_clk       => i_srb_clk,
        i_srb_clk_reset => i_srb_clk_reset,
        i_srb_reply     => i_srb_replies,
        o_srb_reply     => o_srb_reply
    );
endsnippet
       


